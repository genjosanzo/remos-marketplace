«IMPORT form»
«IMPORT ecore»

«EXTENSION template::GeneratorExtensions»
«EXTENSION metamodel::Extensions»
«EXTENSION org::eclipse::xtend::util::stdlib::io»
«EXTENSION org::eclipse::xtend::util::stdlib::globalvar»



«DEFINE main FOR FormCollection»
«EXPAND form FOREACH forms»
«ENDDEFINE»
«DEFINE form FOR Form» 


«FILE "web/geneon/springer/eubkf/web/form/gen/" +name+".java"»
/*******************************************************************************
 * Copyright (c) 2010 Tom Seidel, Remus Software
 * All rights reserved.
 *
 *
 * Contributors:
 *     Tom Seidel - initial API and implementation
 *******************************************************************************/
package geneon.springer.eubkf.web.form.gen;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import javax.servlet.http.HttpServletRequest;

import org.springframework.validation.BindException;
import org.springframework.web.bind.ServletRequestDataBinder;

/**
 * This is a generated class. DO NOT MODIFY THE CONTENTS!!
 * @author Tom Seidel <tom.seidel@remus-software.org>
 */
public class «name»  {
	«EXPAND property FOREACH properties»
	
	public static void onBindAndValidate(HttpServletRequest request, Object command, BindException errors) throws Exception {
	«name» data = («name») command;
	«EXPAND validation FOREACH properties»
	}
	public static void initBinder(HttpServletRequest request, ServletRequestDataBinder binder) throws Exception {
	«EXPAND binder FOREACH properties»
	}
	
	«IF binding != null && EClass.isInstance(binding.boundEntity)»
	public geneon.springer.eubkf.entities.«((EClass)binding.boundEntity).name» fillEntity(geneon.springer.eubkf.entities.«((EClass)binding.boundEntity).name» entity) {
		«FOREACH properties AS e»
			«FOREACH ((EClass)binding.boundEntity).eAllAttributes AS att»
				«IF e.name == att.name»
					entity.set«firstToUpper(att.name)»(«e.name»);
				«ENDIF»
			«ENDFOREACH»	
		«ENDFOREACH»
		return entity;
	}
	public void fillForm(geneon.springer.eubkf.entities.«((EClass)binding.boundEntity).name» entity) {
		«FOREACH properties AS e»
			«FOREACH ((EClass)binding.boundEntity).eAllAttributes AS att»
				«IF e.name == att.name»
					set«firstToUpper(e.name)»(entity.get«firstToUpper(att.name)»());
				«ENDIF»
			«ENDFOREACH»	
		«ENDFOREACH»
	}
	«ENDIF»
	
	private static DateFormat initDateFormat() {
		final DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
        dateFormat.setLenient(false);
        return dateFormat;
	}
	
	
	
}
«ENDFILE»
«ENDDEFINE»
«DEFINE property FOR Property»
	«LET CustomProperty.isInstance(this) ? getTypeIdentifierByReference(null,((CustomProperty)this).className) : getTypeIdentifierByReference(this.metaType.name,null) AS _propertyType»
	private «_propertyType» «name»;
	
	public static final String «name.toUpperCase()» = "«name»";
	
	public «_propertyType» get«firstToUpper(name)»() {
		return this.«name»;
	}
	public void set«firstToUpper(name)»(«_propertyType» «name») {
		this.«name» = «name»;
	}
	«ENDLET»
«ENDDEFINE»
«DEFINE validation FOR Property»
	«FOREACH validation AS e»
		if («buildValidationConstruct(e.metaType.name,this.name)») {
			errors.rejectValue("«name»","«e.errorkey»");
		}
	«ENDFOREACH»
«ENDDEFINE»
«DEFINE binder FOR Property»
	«IF DateProperty.isInstance(this)»
		binder.registerCustomEditor(java.util.Date.class, new org.springframework.beans.propertyeditors.CustomDateEditor(initDateFormat(), true));
	«ENDIF»
	«IF CustomProperty.isInstance(this)»
		binder.registerCustomEditor(«((CustomProperty)this).className».class, new geneon.util.CustomEntityIntegerEditor<«((CustomProperty)this).className»>(«((CustomProperty)this).className».class));
	«ENDIF»
«ENDDEFINE»
«ENDDEFINE»